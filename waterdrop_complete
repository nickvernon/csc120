
;                                                           
; .  .
; 
; EXAMPLE: Water Drop World
; 
;  - Simple animation of a falling water droplet.
;  - Drops a little lower with each clock "tick"
;  - Repositions the drop on a mouse click
;  - Moves it left/right if arrow keys pressed
; 



(require 2htdp/image)
(require 2htdp/universe)

;; An animation of a falling water drop that the user can interact with

;; =================
;; Constants:

(define WIDTH 300)
(define HEIGHT 300)

(define DROP .)
(define SPEED 3)   ; rate drop falls at in pixels per clock tick

(define SCENE (empty-scene WIDTH HEIGHT))



;; =================
;; Data definitions:

;; A Posn is (make-posn Number Number)
;; interp. the water drop's current (x, y) location in the scene

(define P0 (make-posn 0 0))
(define P1 (make-posn (/ WIDTH 2) 0))
(define P2 (make-posn 75 240))

#;    ; template
(define (posn-func a-posn)
  (... (posn-x a-posn) ...
       (posn-y a-posn) ...))


;; =================
;; Functions:

;; main : Posn -> Posn
;; start the world with (main P1)
;; 
(define (main a-posn)
  (big-bang a-posn                    ; Posn
            (on-tick   fall-down)     ; Posn -> Posn
            (to-draw   place-drop)    ; Posn -> Image
            (on-mouse  handle-mouse)  ; Posn Number Number MouseEvent -> Posn
            (on-key    handle-key)))  ; Posn KeyEvent -> Posn
            



;; fall-down : Posn -> Posn
;; produces a posn that has moved down by SPEED amount of pixels
(check-expect (fall-down (make-posn 100 10))
              (make-posn 100 (+ 10 SPEED)))

;(define (fall-down a-posn) a-posn)   ; stub

; use template from Posn

(define (fall-down a-posn)
  (make-posn (posn-x a-posn)
             (+ (posn-y a-posn) SPEED)))



;; place-drop : Posn -> Image
;; produce a scene with water droplet rendered at the given position
(check-expect (place-drop (make-posn 10 290))
              (place-image DROP 10 290 SCENE))

; (define (place-drop a-posn) SCENE)   ; stub

; use template from Posn

(define (place-drop a-posn)
  (place-image DROP
               (posn-x a-posn) (posn-y a-posn) SCENE))



;; handle-key : Posn KeyEvent -> Posn
;; move posn left or right by 3 pixels when the left/right arrows pressed
(check-expect (handle-key (make-posn 10 10) "left")
              (make-posn 7 10))
(check-expect (handle-key (make-posn 10 10) "right")
              (make-posn (+ 10 SPEED) 10))
(check-expect (handle-key (make-posn 10 10) "up")
              (make-posn 10 10))
(check-expect (handle-key (make-posn 10 10) "x")
              (make-posn 10 10))

; (define (handle-key a-posn ke) a-posn)  ; stub
  
; template (based on KeyEvent)
#;
(define (handle-key a-posn ke)
  (cond [(key=? ke " ") (... a-posn ...)]
        [else   
         (... a-posn ...)]))

(define (handle-key a-posn ke)
  (cond
    [(key=? "left" ke) (make-posn (- (posn-x a-posn) SPEED) 
                                   (posn-y a-posn))]
    [(key=? "right" ke) (make-posn (+ (posn-x a-posn) SPEED) 
                                    (posn-y a-posn))]
    [else a-posn]))



;; handle-mouse : Posn Number Number MouseEvent -> Posn
;; react to a mouse click by placing the posn at the given (x, y) point
(check-expect (handle-mouse (make-posn 10 10) 30 40 "button-down")
              (make-posn 30 40))
(check-expect (handle-mouse (make-posn 10 10) 50 30 "drag")
              (make-posn 10 10))

; (define (handle-mouse a-posn x y me) a-posn)  ; stub

; template (based on MouseEvent)
#;
(define (handle-mouse a-posn x y me)
  (cond [(mouse=? me "button-down") (... a-posn x y ...)]
        [else
         (... a-posn x y ...)]))

(define (handle-mouse a-posn x y me)
  (cond
    [(mouse=? "button-down" me) (make-posn x y)]
    [else a-posn]))

