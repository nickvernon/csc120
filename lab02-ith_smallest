;; Orbelin Palacios & Nick Vernon
;; Lab 2

;; ith-smallest: Number -> Number
;; determine the 1st smallest, 2nd smallest, or 3rd smallest of 3 given numbers

(check-expect (ith-smallest 1 1 46 100) 1)
(check-expect (ith-smallest 1 100 1 46) 1)
(check-expect (ith-smallest 2 1 46 100) 46)
(check-expect (ith-smallest 3 1 46 100) 100)

;(define (ith-smallest i a b c) 0)  ; stub
;(define (ith-smallest i a b c)     ; template
;    (... i a b c ... ))

(define (ith-smallest i a b c)
  (-(-(-(-(-(-(+(+(+(+(-(-
   (+(-(+(-
   (-(-(-(+(+(-(+ a b c)                                
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5))(max a b c))) 
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5))(max a b c))) 
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5))(min a b c))) 
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5)) a))          
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5)) b))          
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5)) c))          
    (* (ceiling (/ (- 3 i) (+ i 1))) (max a b c)))      
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5))(max a b c))) 
    (* (ceiling (/ (- 3 i) (+ i 1))) (min a b c)))      
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5))(min a b c))) 
    (* (- i 2) (min a b c)))                            
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5))(min a b c))) 
    (* (- i 2) (max a b c)))                            
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5))(max a b c))) 
    (* (- i 2) (min a b c)))
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5))(min a b c)))
    (* (- i 2) a))
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5)) a))
    (* (- i 2) b))
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5)) b))
    (* (- i 2) c))
    (* (ceiling (- (/ (- 3 i)(+ i 1)) .5)) c))
    )

; tests:

(ith-smallest 1 2 5 86)
(ith-smallest 2 2 5 86)
(ith-smallest 3 2 5 86)

(ith-smallest 1 45 23 5989)
(ith-smallest 2 45 23 5989)
(ith-smallest 3 45 23 5989)

(ith-smallest 1 8941984981 6514615 2)
(ith-smallest 2 8941984981 6514615 2)
(ith-smallest 3 8941984981 6514615 2)
