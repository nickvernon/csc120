;; Nick Vernon

;; IN-CLASS EXERCISES (1/23/2015) - CONDITIONALS; HELPER FUNCTIONS

(require 2htdp/image)

(define CLOUDY .)
(define RAINY .)
(define HAZY .)
(define SUNNY .)

(define ICON-SIZE (image-width SUNNY))

;                                                                     
; TASK:
; 
; Develop a function named `weather-report` that takes a 
; temperature (in degrees Fahrenheit) and a weather condition
; ("sun", "rain", "haze", or "clouds") and produces an image of 
; the temperature value colored either green (below 99◦), 
; yellow (at least 99◦ but less than 101◦) or red (at least 101◦),
; and placed on a black background with an icon corresponding to
; the weather condition.
; 
; For example,
;   (weather-report 98.3 "clouds")
; .
;   (weather-report 99.5 "haze")
; .
;   (weather-report 102.7 "sun")
; .
; 
; 
; Hint: To work on a function like this, it is often helpful to 
;       break the task down into a few small "helper" functions
;       that achieve some specific aspect of the entire task.
;       
;       I would suggest proceeding as follows:
;       
;        - Follow the design recipe to begin developing the
;          `weather-report` function. However, when you get
;          to the body of the function, initially have it simply
;          produce a text image of the temperature value (see note
;          below), just colored black and with no background. (This 
;          version will still fail its tests.)
;                
;        - Now, there are three additional aspects of the task that
;          you need to complete: the color of the text, the
;          weather icon, and the background. Develop three separate 
;          helper functions (following the design recipe entirely 
;          for each one):
;            - a function to choose a color given a 
;              temperature value
;            - a function to choose the appropriate icon given
;              weather condition
;            - a function that takes an image and overlays it
;              on a black background rectangle 10 pixels wider
;              and taller than the image
;          
;        - Now, use those 3 functions to complete the implementation
;          of your `weather-report` function so it works
;          properly. You should note that the result of one 
;          function application will be used as the input to 
;          another function. This way of combining functions we
;          refer to as "composition", and we say that we are
;          "composing" functions.
;          
; Note: To convert a number to a string, use number->string. 
;       However, if you try it on a number like 98.6, you may 
;       get a fraction rather than a decimal. If you want it 
;       in decimal form, first make it inexact, 
;       using `exact->inexact`.
;       


;; weather-report : Number String -> Image
;; produces a weather report image given current temperature and conditions

#;(define (weather-report t wc)    ; stub
  (empty-scene 0 0))

#;(check-expect (weather-report 98.3 "clouds")
              (overlay (beside CLOUDY (text "98.3" 24 "green"))
                       (empty-scene 104 58 "black")))
#;(check-expect (weather-report 99.5 "haze")
              (overlay (beside HAZY (text "99.5" 24 "yellow"))
                       (empty-scene 104 58 "black")))
#;(check-expect (weather-report 102.7 "sun")
              (overlay (beside SUNNY (text "102.7" 24 "red"))
                       (empty-scene 117 58 "black")))

#;(define (weather-report t wc) ; template
  (... t wc ...))

#;(define (weather-report t wc)
   (text (number->string (exact->inexact t)) 24 "black"))

;(weather-report 80.4 "sunny")

;; temp-color : Number -> String
;; given a temperature, produce a certain color

#;(define (temp-color t) "") ; stub

(check-expect (temp-color 98.3) "green")
(check-expect (temp-color 99.5) "yellow")
(check-expect (temp-color 102.7) "red")

#;(define (temp-color t) ; template
    (... t ...))

(define (temp-color t)
  (cond [(< t 99) "green"]
        [(< t 101) "yellow"]
        [else "red"]
        ))

(temp-color 98)
(temp-color 100)

;; choose-icon : String -> Image
;; given weather condition, produce corresponding icon

;(define (choose-icon wc) (circle 20 "solid" "blue")) ; stub
  
(check-expect (choose-icon "sun") SUNNY)
(check-expect (choose-icon "haze") HAZY)
(check-expect (choose-icon "clouds") CLOUDY)
(check-expect (choose-icon "rain") RAINY)

#;(define (choose-icon wc) ; template
  (... wc ...))

(define (choose-icon wc) 
  (cond [(string=? wc "sun") SUNNY]
        [(string=? wc "haze") HAZY]
        [(string=? wc "clouds") CLOUDY]
        [(string=? wc "rain") RAINY]
        ))

(choose-icon "sun")


;; black-overlay : Image -> Image
;; given image, overlay it on a black background

#;(define (black-overlay an-img) ; stub
           (overlay an-img (rectangle (+ (image-width an-img) 10) (+ (image-height an-img) 10) "solid" "black")))

(check-expect (black-overlay SUNNY) 
          (overlay SUNNY (rectangle (+ (image-width SUNNY) 10) (+ (image-height SUNNY) 10) "solid" "black")))
(check-expect (black-overlay CLOUDY) 
          (overlay CLOUDY (rectangle (+ (image-width CLOUDY) 10) (+ (image-height CLOUDY) 10) "solid" "black")))
(check-expect (black-overlay HAZY) 
          (overlay HAZY (rectangle (+ (image-width HAZY) 10) (+ (image-height HAZY) 10) "solid" "black")))

#;(define (black-overlay an-img) ; template
           (... an-img ...))

(define (black-overlay an-img) 
    (overlay an-img 
             (rectangle (+ (image-width an-img) 10) 
                        (+ (image-height an-img) 10) "solid" "black")))

(black-overlay SUNNY)


;; weather-report : Number -> Image
;; given temperature and weather report, produce corresponding weather report

#;(define (weather-report t wc) ; stub
  (empty-scene 0 0))

(check-expect (weather-report 98.3 "clouds")
              (overlay (beside CLOUDY (text "98.3" 24 "green"))
                       (empty-scene 104 58 "black")))
(check-expect (weather-report 99.5 "haze")
              (overlay (beside HAZY (text "99.5" 24 "yellow"))
                       (empty-scene 104 58 "black")))
(check-expect (weather-report 102.7 "sun")
              (overlay (beside SUNNY (text "102.7" 24 "red"))
                       (empty-scene 117 58 "black")))
;(check-expect (weather-report 102.7 "sun")
;              (overlay (temp-color 102.7)
;                       (choose-icon (black-overlay 58))))


#;(define (weather-report t wc) ; template
  (... t wc ...))

#;(define (weather-report t wc)
  (overlay (temp-color t) (choose-icon wc) (black-overlay wc)))

(define (weather-report t wc)
    (black-overlay (beside (choose-icon wc)
           (text (number->string (exact->inexact t)) 24 (temp-color t)))))

;(weather-report 80.4 "sunny")


;                                                                     
; TASK:
; 
; Design a function that calculates late fees on a movie rental. 
; The function consumes the number of days the movie has been rented.
; Up to 3 days is a regular rental, no fee. For the next week the fee
; goes up $3 each day. Starting on the 10th day the fee becomes $20 
; and never changes.
; 




;                                                                     
; TASK:
; 
; Develop a function make-shape that takes in three strings: a shape
; (either "circle" or "triangle"), a size (either "small", "medium",
; or "large"), and a color name (any color that DrRacket recognizes), 
; and produces an appropriate image.
; 
; Note: Make sure that a “medium circle” and a “medium triangle”
; are about the same size.
; 




;                                                                     
; TASK:
; 
; The following code produces bar graphs for three pieces of data.
; Try it out in the interactions area with different number values.
; Also study the body of the function definition. Whoever wrote it
; was not using good coding style!!!
; 
;  1. Fix up the spacing and indentation to make it
;     more readable. Can you understand how it works?
;     
;  2. Even with nice spacing and indentation, it's still hard to
;     figure out what this function is doing. Develop a cleaner
;     version of this program using helper functions and/or
;     constant definitions. Your final version should have the same 
;     behavior as the original code (don't embellish it, just clean
;     it up). Be sure to follow the design recipe for your helper
;     functions.
;   
;  3. See if you can now modify the function so that it sizes its
;     background to fit bars of any length (instead of just up to 20)
; 
;  4. Upload your file with this completed exercise to the classwork
;     submit form on the website before next class, and be prepared
;     to share with the rest of the class how you went about this 
;     exercise. Specifically, how did you decide when to create a 
;     helper function or constant? What else did you do to clean up 
;     the code?
;  


;; bar-graph : Number Number Number -> Image
;; consumes three numbers and produces a bar graph of results
;; NOTE: background image is sized for values up to 20
(check-expect (bar-graph 5 10 4)  .)
(check-expect (bar-graph 15 3 20) .)

(define (bar-graph num-a num-b num-c)
  (place-image/align 
                   (rectangle 15 (* 3 
               num-a) "solid" "red")  10 10 "left" "top" (place-image/align
    (rectangle 15 (* 3 num-b) "solid" "blue")
    35 10 "left" "top"
               (place-image/align (rectangle 15 (* 3 num-c) "solid" "green")
         60 10 "left" "top"
     (empty-scene 85 
80)))))





