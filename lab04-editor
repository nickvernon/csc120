;; Orbelin Palacios & Nick Vernon
;; Lab 4 - Graphical Editor 

(require 2htdp/image)
(require 2htdp/universe)
(require net/sendurl)


;                                                                                          
;                                                                                          
;                                                                                          
;                                                                                          
;   ;;;;               ;;;     ;               ;               ;                           
;    ;  ;             ;                              ;                                     
;    ;   ;   ;;;;   ;;;;;;   ;;;    ;; ;;    ;;;    ;;;;;    ;;;     ;;;;   ;; ;;    ;;;;; 
;    ;   ;  ;    ;    ;        ;     ;;  ;     ;     ;         ;    ;    ;   ;;  ;  ;    ; 
;    ;   ;  ;;;;;;    ;        ;     ;   ;     ;     ;         ;    ;    ;   ;   ;   ;;;;  
;    ;   ;  ;         ;        ;     ;   ;     ;     ;         ;    ;    ;   ;   ;       ; 
;    ;  ;   ;         ;        ;     ;   ;     ;     ;   ;     ;    ;    ;   ;   ;  ;    ; 
;   ;;;;     ;;;;;  ;;;;;;   ;;;;;  ;;; ;;;  ;;;;;    ;;;    ;;;;;   ;;;;   ;;; ;;; ;;;;;  
;                                                                                          
;                                                                                          
;                                                                                          
;                                                                                          

(define-struct editor (pre post))
; An Editor is (make-editor String String)
; interp.: (make-editor s t) means the text in the editor is
; (string-append s t) with the cursor displayed between s and t;


#;    ; template             
(define (editor-func an-editor)
  (... (editor-pre)                 ; String
       (editor-post) ...))          ; String

; examples
(define EDIT1 (make-editor "hello" "world"))     
(define EDIT2 (make-editor "nick&" "orbelin"))
(define EDIT3 (make-editor "comp" ""))
(define EDIT4 (make-editor "compi" ""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; A KeyEvent is one of:
;  - "\b"
;  - "\t"
;  - "\u007F"
;  - "left"
;  - "right"
;  - one-letter string 
;  - anything else
; interp. the result from the key entered              

(define (keyevent-func  a-ke)
  (cond 
    [(key=? a-ke "\b")(...)]
    [(key=? a-ke "\t")(...)]
    [(key=? a-ke "\u007F")(...)]
    [(key=? a-ke "left")(...)]
    [(key=? a-ke "right")(...)]
    [(= 1 (string-length a-ke))(...)]
    [else (...)]))




;                                                                          
;                                                                          
;                                                                          
;                                                                          
;   ;;;;;;                                     ;                           
;    ;   ;                           ;                                     
;    ; ;    ;;  ;;  ;; ;;    ;;; ;  ;;;;;    ;;;     ;;;;   ;; ;;    ;;;;; 
;    ;;;     ;   ;   ;;  ;  ;   ;;   ;         ;    ;    ;   ;;  ;  ;    ; 
;    ; ;     ;   ;   ;   ;  ;        ;         ;    ;    ;   ;   ;   ;;;;  
;    ;       ;   ;   ;   ;  ;        ;         ;    ;    ;   ;   ;       ; 
;    ;       ;  ;;   ;   ;  ;    ;   ;   ;     ;    ;    ;   ;   ;  ;    ; 
;   ;;;       ;; ;; ;;; ;;;  ;;;;     ;;;    ;;;;;   ;;;;   ;;; ;;; ;;;;;  
;                                                                          
;                                                                          
;                                                                          
;                                                                          



;; render : Editor -> Image
;; produces text within an empty scene of 200x20 pixels

(check-expect (render EDIT1)(overlay/align "left" "center"
                             (beside (text "hello" 16 'black)
                                     (beside (rectangle 1 20 "solid" "red")
                                             (text "world" 16 "black")
                                             ))
                             (empty-scene 200 20)))
(check-expect (render EDIT2)(overlay/align "left" "center"
                             (beside (text "nick&" 16 'black)
                                     (beside (rectangle 1 20 "solid" "red")
                                             (text "orbelin" 16 "black")
                                             ))
                             (empty-scene 200 20)))
 
(define (render an-editor)
  (overlay/align "left" "center"
                 (beside (text (editor-pre an-editor) 16 'black)
                         (beside (rectangle 1 20 "solid" "red")
                                 (text (editor-post an-editor) 16 "black")
                                 ))
                 (empty-scene 200 20)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; edit : Editor KeyEvent -> Editor
;; adds a single-character KeyEvent to the end of the pre field of the given editor 
;; unless the keyevent is the backspace. If it is the backspace, it deletes the character
;; immediately to the left of the cursor if there are any. If the key event left is input
;; the cursor moves left of the character immediately to its left if any, and if the key event right
;; is input the cursor moves right of the character immediately to its right if any. The tab key
;; completes the most popular term if applicable and the enter key sends the text to google search

(check-expect (edit EDIT1 "a") (make-editor (string-append "hello" "a") "world"))
(check-expect (edit EDIT1 "b") (make-editor (string-append "hello" "b") "world"))
(check-expect (edit EDIT1 "c") (make-editor (string-append "hello" "c") "world"))
(check-expect (edit EDIT1 "d") (make-editor (string-append "hello" "d") "world"))
(check-expect (edit EDIT1 "e") (make-editor (string-append "hello" "e") "world"))
(check-expect (edit EDIT1 "f") (make-editor (string-append "hello" "f") "world"))
(check-expect (edit EDIT1 "g") (make-editor (string-append "hello" "g") "world"))
(check-expect (edit EDIT1 "h") (make-editor (string-append "hello" "h") "world"))
(check-expect (edit EDIT1 "i") (make-editor (string-append "hello" "i") "world"))
(check-expect (edit EDIT1 "j") (make-editor (string-append "hello" "j") "world"))
(check-expect (edit EDIT1 "k") (make-editor (string-append "hello" "k") "world"))
(check-expect (edit EDIT1 "\b") (make-editor "hell" "world"))
(check-expect (edit EDIT1 "\t") EDIT1)
(check-expect (edit EDIT1 "\u007F") EDIT1)
(check-expect (edit (make-editor "" "world") "\b") (make-editor "" "world"))
(check-expect (edit EDIT1 "left") (make-editor "hell" "oworld"))
(check-expect (edit (make-editor "" "helloworld") "left") (make-editor "" "helloworld"))
(check-expect (edit EDIT1 "right") (make-editor "hellow" "orld"))
(check-expect (edit (make-editor "helloworld" "") "right") (make-editor "helloworld" ""))
(check-expect (edit EDIT1 "add") EDIT1)
(check-expect (edit EDIT1 "jk") EDIT1)

(define (edit an-editor a-ke) 
      (cond
        [(and (key-event? a-ke)(key=? "\b" a-ke)) 
         (make-editor (if (> (string-length (editor-pre an-editor)) 0)
                          (substring (editor-pre an-editor) 0 (- (string-length (editor-pre an-editor)) 1))
                          (editor-pre an-editor))
                      (editor-post an-editor))]
        [(and (key-event? a-ke)(key=? "\t" a-ke)) an-editor]
        [(and (key-event? a-ke)(key=? "\u007F" a-ke)) an-editor]
        [(and (key-event? a-ke)(key=? "left" a-ke)) 
         (make-editor (if (> (string-length (editor-pre an-editor)) 0)
                          (substring (editor-pre an-editor) 0 (- (string-length (editor-pre an-editor)) 1))
                          (editor-pre an-editor))
                      (if (> (string-length (editor-pre an-editor)) 0)
                          (string-append (substring (editor-pre an-editor) (- (string-length (editor-pre an-editor)) 1) (string-length (editor-pre an-editor))) (editor-post an-editor))
                          (editor-post an-editor)))]
        [(and (key-event? a-ke)(key=? "right" a-ke)) 
         (make-editor (if (> (string-length (editor-post an-editor)) 0)
                          (string-append (editor-pre an-editor) (substring (editor-post an-editor) 0 1))
                          (editor-pre an-editor))
                      (if (> (string-length (editor-post an-editor)) 0)
                          (substring (editor-post an-editor) 1 (string-length (editor-post an-editor)))
                          (editor-post an-editor)))] 
        [(and (key-event? a-ke) (and (= 1 (string-length a-ke)) (< (image-width (text (string-append (editor-pre an-editor) a-ke (editor-post an-editor)) 16 "black")) 200)))
         (make-editor (string-append (editor-pre an-editor) a-ke) (editor-post an-editor))]
        [else an-editor]
        ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; run : Editor -> Image
;; consumes the pre and post field of an editor and launches an interactive editor


(define (run an-editor)
     (big-bang an-editor
            (to-draw render)
            (on-key edit)
            ))
